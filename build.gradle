plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}

	maven { url = "https://maven.quiltmc.org/repository/release" } // QM
	maven { url = "https://maven.parchmentmc.org" } // Parchment
	maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
	maven { url = "https://mvn.devos.one/snapshots/" } // Registrate, Porting Lib, Forge Tags, Milk Lib
	maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
	maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.tterrag.com/" } // Flywheel
	maven { url = "https://maven.shedaniel.me/" } // REI and deps
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Sodium, Sandwichable
	maven { url = "https://maven.terraformersmc.com/" } // Mod Menu, Trinkets
	maven { url = "https://squiddev.cc/maven" } // CC:T
	maven { url = "https://modmaven.dev" } // Botania
	maven { // Reach Entity Attributes
		url = "https://maven.jamieswhiteshirt.com/libs-release"
		content { includeGroup("com.jamieswhiteshirt") }
	}
	maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
	
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "curse.maven:terralith-513688:4938254"

		devEnv(dependencies)
		compat(dependencies)
		dependencies(dependencies)



	}

// actual dependencies for Create
	def dependencies(DependencyHandler deps) {

		for (String module in port_lib_modules.split(",")) {
			deps.modApi(deps.include("io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version"))
		}

		deps.modApi(deps.include("com.tterrag.registrate_fabric:Registrate:$registrate_version")) {
			exclude(group: "io.github.fabricators_of_create") // avoid duplicate Porting Lib
		}

		deps.modApi(deps.include("com.electronwill.night-config:core:$night_config_version"))
		deps.modApi(deps.include("com.electronwill.night-config:toml:$night_config_version"))
		deps.modApi(deps.include("curse.maven:forge-config-api-port-fabric-547434:$config_api_id"))
		deps.modApi(deps.include("com.jozufozu.flywheel:flywheel-fabric-$flywheel_minecraft_version:$flywheel_version"))
		deps.modApi(deps.include("com.jamieswhiteshirt:reach-entity-attributes:$reach_entity_attributes_version"))
		deps.modApi(deps.include("io.github.tropheusj:milk-lib:$milk_lib_version"))
		deps.api(deps.include("com.google.code.findbugs:jsr305:$jsr305_version"))
	}


// setup mods that enhance development
	def devEnv(DependencyHandler deps) {
		deps.modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
		deps.modLocalRuntime("dev.emi:trinkets:$trinkets_version") { transitive = false }
		// for Trinkets
		deps.modLocalRuntime("dev.onyxstudios.cardinal-components-api:cardinal-components-base:$cca_version")
		deps.modLocalRuntime("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:$cca_version")
		if (Boolean.valueOf(cc_enabled)) {
			deps.modLocalRuntime("cc.tweaked:cc-tweaked-$minecraft_version-fabric:$cc_version")
			deps.modLocalRuntime("maven.modrinth:cloth-config:$cloth_version")
		}
		// have deprecated modules present at runtime only
		deps.modLocalRuntime("net.fabricmc.fabric-api:fabric-api-deprecated:$fabric_version")
	}

// setup mods that are available for compatibility reasons
	def compat(DependencyHandler deps) {
		deps.modCompileOnly("cc.tweaked:cc-tweaked-$minecraft_version-fabric-api:$cc_version")

		deps.modCompileOnly("vazkii.botania:Botania:$botania_version") { transitive = false }
		deps.modCompileOnly("com.terraformersmc:modmenu:$modmenu_version")
		deps.modCompileOnly("maven.modrinth:sandwichable:$sandwichable_version")
		deps.modCompileOnly("maven.modrinth:sodium:$sodium_version")

		deps.modCompileOnly("dev.emi:trinkets:$trinkets_version")
		// for Trinkets
		deps.modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-base:$cca_version")
		deps.modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:$cca_version")


	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}


}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}

	loom {
		accessWidenerPath = file("src/main/resources/edumia.accesswidener")
	}
}